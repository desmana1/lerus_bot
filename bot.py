import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("tg-bot")

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
PORT = int(os.getenv("PORT", "8080"))
BASE_URL = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("WEBHOOK_URL")


# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---

def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (4 –∫–Ω–æ–ø–∫–∏)."""
    keyboard = [
        [InlineKeyboardButton("üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 1", callback_data="info1")],
        [InlineKeyboardButton("üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 2", callback_data="info2")],
        [InlineKeyboardButton("üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 3", callback_data="info3")],
        [InlineKeyboardButton("üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 4", callback_data="info4")],
    ]
    return InlineKeyboardMarkup(keyboard)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


async def on_menu_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()

    if query.data == "info1":
        text = "–≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ ‚Ññ1. –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–∞—è —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."
    elif query.data == "info2":
        text = "–≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ ‚Ññ2. –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."
    elif query.data == "info3":
        text = "–≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ ‚Ññ3. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–ª–∏ —Å—Å—ã–ª–∫—É."
    elif query.data == "info4":
        text = "–≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ ‚Ññ4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è."
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–Ω–∫—Ç."

    await query.message.edit_text(f"{text}\n\n–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é:", reply_markup=main_menu())


# --- –ó–∞–ø—É—Å–∫ ---

def main():
    if not TOKEN:
        raise RuntimeError("–ù–µ—Ç TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    if not BASE_URL:
        raise RuntimeError("–ù–µ—Ç RENDER_EXTERNAL_URL/WEBHOOK_URL")

    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_menu_click))

    # Webhook –¥–ª—è Render
    webhook_url = f"{BASE_URL.rstrip('/')}/{TOKEN}"
    log.info("Starting webhook on %s", webhook_url)

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )


if __name__ == "__main__":
    main()
